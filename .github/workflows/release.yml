name: Publish latest release

on:
  push:
    tags:
      - 'v*'   # Runs on tags like v1.0, v2.1.3, etc.
  workflow_dispatch:   # Manual trigger

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh jq

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${GH_TOKEN}" | gh auth login --with-token
          gh auth status

      - name: Get latest successful build run ID
        id: get_run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          run_id=$(gh run list \
            --workflow "Build Xvfb (x86_64 + ARM64)" \
            --branch main \
            --json databaseId,status,conclusion \
            -q '.[] | select(.status=="completed" and .conclusion=="success") | .databaseId' | head -n1)

          if [ -z "$run_id" ]; then
            echo "No successful build found" && exit 1
          fi

          echo "Found build run ID: $run_id"
          echo "run_id=$run_id" >> $GITHUB_OUTPUT

      - name: Download artifacts from latest successful build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir artifacts
          gh run download ${{ steps.get_run.outputs.run_id }} --dir artifacts
          echo "Downloaded artifacts:"
          ls -R artifacts

      - name: Create or update release
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${GITHUB_REF_NAME}"

          # Check if release already exists
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release for tag $TAG already exists, updating..."
          else
            echo "Creating new release for tag $TAG..."
            gh release create "$TAG" --title "Release $TAG" --notes "Automated release for $TAG"
          fi

      - name: Upload artifacts to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${GITHUB_REF_NAME}"
          for file in $(find artifacts -type f); do
            echo "Uploading $file..."
            gh release upload "$TAG" "$file" --clobber
          done
